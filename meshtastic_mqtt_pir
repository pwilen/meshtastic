#!/usr/bin/env python3

# Import required Python libraries
import paho.mqtt.client as paho
from pubsub import pub
import time
import urllib.parse
import RPi.GPIO as GPIO
import datetime
import subprocess
import meshtastic

# Mqtt
mqttc = paho.Client()
url_str = 'mqtt://mqtt.local:1883'
url = urllib.parse.urlparse(url_str)
mqttc.username_pw_set("mqttuser", "mqttpassword")

# Use BCM GPIO references
# instead of physical pin numbers
GPIO.setmode(GPIO.BCM)

# Define GPIO to use on Pi
GPIO_PIR = 17

print("PIR Module Test (CTRL-C to exit)")

# Set pin as input
GPIO.setup(GPIO_PIR,GPIO.IN)      # Echo

Current_State  = 0
Previous_State = 0

#Setup meshtastic TCPInterface
interface = meshtastic.TCPInterface("192.168.68.xx")


#Setup MQTT
def printtime(): # Used for debug
	# Current time
	global hour, minute, wholetime
	now = datetime.datetime.now()
	hour = str(now.hour)
	minute = int(now.minute)
	minute = '%02d' % minute
	wholetime = hour + ":" + minute

#Definitions
def sendtomesh(mess):
    try:
        interface.sendText(mess)
        sleep(5)
    except:
        pass
def on_subscribe(mqttc, userdata, mid, granted_qos):
    print("Subscribed: "+str(mid)+" "+str(granted_qos))

def on_message(mqttc, userdata, msg):
    print(msg.topic+" "+str(msg.qos)+" "+str(msg.payload)) 
    sendtomesh(msg.topic+" "+str(msg.qos)+" "+str(msg.payload))

def sendmqtt(mess):
    try:
        mqttc.connect(url.hostname, url.port)
        mqttc.publish("movement/touch", mess)
        sleep(5)
    except:
        pass

def onReceive(packet, interface): # called when a packet arrives
  print(f"Received: {packet}")

def onConnection(interface, topic=pub.AUTO_TOPIC): # called when we (re)connect to the radio
  print ("starting...")
  rt = RepeatedTimer(30, sendText) # no need of rt.start()

pub.subscribe(onReceive, "meshtastic.receive")
pub.subscribe(onConnection, "meshtastic.connection.established")

#Notify that we are ready to go
sendmqtt("Pirmqtt started")
sendtomesh("Pirmqtt started")

# Subscribe to MQTT
mqttc.on_subscribe = on_subscribe
mqttc.on_message = on_message
#mqttc.connect(url.hostname, url.port)
mqttc.subscribe("temperature/inside", qos=1)
mqttc.subscribe("movement/touch", qos=1)

#Loop
try:

  print("Waiting for PIR to settle ...")

  # Loop until PIR output is 0
  while GPIO.input(GPIO_PIR)==1:
    Current_State  = 0

  print("Ready")

  # Loop until users quits with CTRL-C
  while True :
    #Loop the MQTT client
#    mqttc.loop_start()
    # Read PIR state
    Current_State = GPIO.input(GPIO_PIR)

    if Current_State==1 and Previous_State==0:
      # PIR is triggered
      currTime = datetime.datetime.now().strftime("%H:%M:%S")
      print("Motion detected at " + currTime) 
      sendtomesh("Motion detected at " + currTime)
      sendmqtt("Motion detected at " + currTime)
      #subprocess.call('/home/pi/wakeup.sh', shell=True)
      # Record previous state
      Previous_State=1
    elif Current_State==0 and Previous_State==1:
      # PIR has returned to ready state
      print("Ready")
      Previous_State=0

    # Wait for 5 seconds
    time.sleep(5)
    mqttc.loop()
    print("Sleep 5 seconds then loop MQTT client")
    #subprocess.call('/home/pi/sleep.sh', shell=True)
except KeyboardInterrupt:
  print("Quit")
  # Reset GPIO settings
  GPIO.cleanup()
  mqttc.loop_stop()
